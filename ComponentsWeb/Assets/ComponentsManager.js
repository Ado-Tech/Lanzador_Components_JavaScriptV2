const SUCCESS_MSJ="SUCCESS";var stylesLivenessLoaded=null;var clientLivenessLoaded=null;var CASE_ID=null;var NEW_UID_DEVICE=null;var config;const VERSION_COMPONENT=1.0;const SUCCESS=1;const ERROR_LIVENESS=2;const ERROR_CARD_CAPTURE=3;const ERROR_TOKEN=4;const E_LIVENESS_TYPE={SCANNOVATE_LIVENESS:1,IPROOV_LIVENESS:2,LIVE_PICTURE:3,SCANNOVATE_NEW_LIVENESS:4};async function Start(urlBase,projectName,apiKey,productId,functionCapture,isFrontSide,UidDevice,token,onSuccessCallBack,onErrorCallBack){try{if(ModelIsValid(urlBase,projectName,apiKey,productId,functionCapture,UidDevice)){config=await getConfig();if(config!=null){if(functionCapture==1){if(config.TypeLiveness==E_LIVENESS_TYPE.SCANNOVATE_LIVENESS){LoadLivenessResources()}if(config.TypeLiveness==E_LIVENESS_TYPE.SCANNOVATE_NEW_LIVENESS){StartProcessNewLiveness()}}else if(functionCapture==2){InitializeCardCapture()}}}}catch(error){GenerateResponse(ERROR_TOKEN,null,error.message)}function ModelIsValid(urlBase,projectName,apiKey,productId,functionCapture,uidDevice){CASE_ID='xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);return v.toString(16)});NEW_UID_DEVICE='xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);return v.toString(16)});var msj="";var valid=true;if(!uidDevice||0===uidDevice.length){UidDevice=NEW_UID_DEVICE}if(!urlBase||0===urlBase.length){msj=`${ msj } The param urlBase is required`}if(!projectName||0===projectName.length){msj=`${ msj } The param projectName is required`}if(!apiKey||0===apiKey.length){msj=`${ msj } The param apiKey is required`}if(!productId||0===productId.length){msj=`${ msj } The param productId is required`}if(!functionCapture||functionCapture==0||functionCapture>2){msj=`${ msj } The param functionCapture is empty or not valid`}if(msj!=""){valid=false;GenerateResponse(ERROR_TOKEN,null,msj)}return valid}function GenerateResponse(StatusCode,Image,Message,SendLog=true){var obj={};obj.StatusCode=StatusCode;obj.Image=Image;obj.UIdDevice=UidDevice;obj.keyProcessLiveness=CASE_ID;obj.Message=Message;if(SendLog){RegisterLogComponents(StatusCode,Message,obj)}else{onErrorCallBack(obj)}}async function getConfig(){try{const response=await fetch(`${ urlBase }/api/${ projectName }/GetConfig?Message=none`,{method:'POST',headers:{'apiKey':apiKey,'productId':productId},redirect:'follow'});if(!response.ok){GenerateResponse(ERROR_TOKEN,null,"invalidCredentials");return null}else{return await response.json()}}catch(error){if(error.message==="Failed to fetch"){GenerateResponse(ERROR_TOKEN,null,`connectionError`,false)}else{GenerateResponse(ERROR_TOKEN,null,`invalidParameters`,false)}}}async function AddScriptLiveness(src){var newScript=document.createElement('script');newScript.setAttribute('src',src);newScript.async=false;newScript.onload=function(){clientLivenessLoaded=true;StartProcessLiveness(clientLivenessLoaded,stylesLivenessLoaded)};newScript.onerror=function(){clientLivenessLoaded=false};document.body.appendChild(newScript)}function AddStyleLiveness(src){var head=document.getElementsByTagName('head')[0];var link=document.createElement('link');link.async=false;link.rel='stylesheet';link.type='text/css';link.href=src;link.media='all';link.onload=function(){stylesLivenessLoaded=true;StartProcessLiveness(clientLivenessLoaded,stylesLivenessLoaded)};link.onerror=function(params){stylesLivenessLoaded=false};head.appendChild(link)}function LoadLivenessResources(){if(clientLivenessLoaded==null||clientLivenessLoaded==false){}if(stylesLivenessLoaded==null||stylesLivenessLoaded==false){AddStyleLiveness(`${config.UrlServiceLiveness }/client/assets/main.css`)}AddScriptLiveness(`${config.UrlServiceLiveness }/client/script.js`)}function StartProcessLiveness(script,css){if(script&&css){try{var capturedImg;const libEvents={connect:'connect',connectError:'connect_error',disconnect:'disconnect',faceImage:'face_image',libraryReady:'library_ready',serverError:'serverError',socketError:'socket_error',status:'status'};const configObj={"landscapeModeAllowed":true,"devMode":false,"disableAudioPermissionRequest":true,"successSoundUrl":config.UrlServiceLiveness+"/client/assets/audio/sn_v_sound.mp3","language":"es","cameraDirection":(config.SecondCamera==true)?'environment':'',"customMessages":{"ALIGN_FACE":config.ConfigurationUI.LivenessUI.OngoingAlignFaceText,"ALIGN_FACE_SUB":" ","LOOK_CENTER":config.ConfigurationUI.LivenessUI.LookAtCenterText,"LOOK_CENTER_SUB":" ","LOOK_LEFT":config.ConfigurationUI.LivenessUI.LookLeftText,"LOOK_LEFT_SUB":" ","FACE_OFF_CENTER":config.ConfigurationUI.LivenessUI.OngoingAlignFaceText,"FACE_OFF_CENTER_SUB":" ","LOOK_RIGHT":config.ConfigurationUI.LivenessUI.LookRightText,"LOOK_RIGHT_SUB":" ","FACE_TOO_FAR":config.ConfigurationUI.LivenessUI.ComeCloserText,"FACE_TOO_FAR_SUB":" ","FACE_TOO_CLOSE":config.ConfigurationUI.LivenessUI.GetFurtherText,"FACE_TOO_CLOSE_SUB":" ","TOO_MANY_FACES":config.ConfigurationUI.LivenessUI.MultipleFacesFoundText,"TOO_MANY_FACES_SUB":" ","START_PASSIVE_CHECK":config.ConfigurationUI.LivenessUI.SessionEndedSuccessfullyText,"START_PASSIVE_CHECK_SUB":" "},"instructions":{"position":config.ConfigurationUI.LivenessUI.InstructionsPosition==1?"top":"bottom","fontFamily":"'Rubik', 'Roboto', 'Open Sans', 'Lucida Grande', sans-serif'","fontSize":"24px","subFontFamily":"'Rubik', 'Roboto', 'Open Sans', 'Lucida Grande', sans-serif'","subFontSize":"18px","underlineColor":config.ConfigurationUI.LivenessUI.UnderlineColorResource},"successSign":{"color":config.ConfigurationUI.LivenessUI.SuccessSignColor,"backgroundColor":config.ConfigurationUI.LivenessUI.SuccessSignBackgroundColor },"passiveCheckProgressBar":{"color":config.ConfigurationUI.LivenessUI.LoaderColorResource,"backgroundColor":config.ConfigurationUI.LivenessUI.SuccessSignBackgroundColor},"directionSign":{"color":config.ConfigurationUI.LivenessUI.DirectingArrowsColor,"shape":config.ConfigurationUI.LivenessUI.DirectionSignShape==1?"arrow":"triangle"},"loader":{"color":config.ConfigurationUI.LivenessUI.LoaderColorResource}};const myCaseId=`${ CASE_ID }`,socket_io_url=config.UrlServiceLiveness,client=lacs.connect(socket_io_url,myCaseId,{path:"/liveness/v1/",query:{token:'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',caseId:myCaseId}},configObj);lacs.plugins.frameRecorder.init(client);client.bindContainer(document.getElementById('livenessContainer'));generateInitLibraryPromise=function(){return new Promise((res)=>{client.on('library_ready',function(ignore){res()})})};let onInitLibrary=generateInitLibraryPromise();const reconnectToServer=function(){console.log('reconnecting to server!');client.initSocketWithCurrentConfig()};client.on(libEvents.connect,()=>{client.setWebHookParams({system:1,caseId:myCaseId})});client.on(libEvents.disconnect,(reason)=>{console.log('Socket disconnected');if(reason==='io server disconnect'){console.log('server sent disconnect!');onInitLibrary=generateInitLibraryPromise();reconnectToServer()}});client.on(libEvents.connectError,()=>{GenerateResponse(ERROR_LIVENESS,null,`connectionError`)});client.on(libEvents.socketError,(error)=>{if(error==='Server reached maximum concurrent capacity'){GenerateResponse(ERROR_LIVENESS,null,`exception`)}if(error==="Query param 'caseId' was not found"){GenerateResponse(ERROR_LIVENESS,null,`exception`)}});client.on(libEvents.faceImage,(data)=>{capturedImg=data});onInitLibrary.then(()=>{client.bindContainer(document.getElementById('livenessContainer'))});client.on(libEvents.status,(status)=>{switch(status){case 0:client.stopProcessingEverythingAndDisconnect();capturedImg=capturedImg.replace("data:image/jpeg;base64,","");GenerateResponse(SUCCESS,capturedImg,SUCCESS_MSJ);break;case 1:client.stopProcessingEverythingAndDisconnect();console.log("Liveness Fail");GenerateResponse(ERROR_LIVENESS,null,`livenessFailed`);break;case 8:client.stopProcessingEverythingAndDisconnect();console.log("Liveness TimeOut");GenerateResponse(ERROR_LIVENESS,null,`livenessTimeout`);break}});client.on('error',(err)=>{if(err&&err.name&&['NotFoundError','DevicesNotFoundError','NotReadableError','TrackStartError','OverconstrainedError','ConstraintNotSatisfiedError','NotAllowedError','PermissionDeniedError'].includes(err.name)){client.stopProcessingEverythingAndDisconnect();GenerateResponse(ERROR_LIVENESS,null,`canNotOpenCamera`)}});client.on(libEvents.serverError,(error)=>{console.log(`serverError (${error.code })`);GenerateResponse(ERROR_LIVENESS,null,`exception`)})}catch(e){GenerateResponse(ERROR_LIVENESS,null,`exception`)}}}function InitializeCardCapture(){const configObjTakePIcture={"SHOW_RESULTS":false,"NUMBER_OF_IMAGES":1,"POPUP_TEXT":"Capturar Cara posterior","POSITION_INSTRUCTION_FRONT_SIDE":isFrontSide?config.ConfigurationUI.CardCaptureUI.CaptureFrontInstructionsText:config.ConfigurationUI.CardCaptureUI.CaptureBackInstructionsText,"POSITION_INSTRUCTION_BACK_SIDE":config.ConfigurationUI.CardCaptureUI.CaptureBackInstructionsText,"SIDE_A":"Side A","SIDE_B":"Side B","RESULTS_PAGE_TITLE":"Confirmar Foto","RESULTS_CONDITIONS_TITLE":"Make Sure:","CONDITIONS":[{"CONDITION":"Se escaneó toda la identificación"},{"CONDITION":"Sin deslumbramiento en la identificación"},{"CONDITION":"El texto es legible."}],"CONFIRM_BUTTON":"OK","TRY_AGAIN_BUTTON":"Inténtalo de nuevo","COLORS":{"positionInstructionTextBackground":config.ConfigurationUI.CardCaptureUI.InstructionsBackgroundColor,"instructionsTextColor":config.ConfigurationUI.CardCaptureUI.InstructionsColor,"instructionsColor":config.ConfigurationUI.CardCaptureUI.InstructionsColor,"loaderColor":config.ConfigurationUI.CardCaptureUI.BackArrowColor,"popupBackgroundColor":"white","popupTextColor":"red","primaryColor":config.ConfigurationUI.CardCaptureUI.MainColor,"backArrow":config.ConfigurationUI.CardCaptureUI.BackArrowColor},"FONT":"'Roboto', sans-serif"};let capture;try{configObjTakePIcture['NUMBER_OF_IMAGES']=1;capture=scanovate_card_capture();capture.destroyFirstPage(configObjTakePIcture.KILL_STREAM_AFTER_USAGE);capture.destroySecondPage();capture.init(configObjTakePIcture);document.getElementById("back-button").addEventListener("click",function(){GenerateResponse(ERROR_CARD_CAPTURE,null,`userCanceled`)});capture.on('error',(err)=>{console.log(`Error name: ${err&&err.name }, message: ${err&&err.message }`);capture.destroyFirstPage(configObjTakePIcture.KILL_STREAM_AFTER_USAGE);capture.destroySecondPage();if(err.name=="ScanovateCameraError"){GenerateResponse(ERROR_CARD_CAPTURE,null,`canNotOpenCamera`)}else{GenerateResponse(ERROR_CARD_CAPTURE,null,`exception`)}});capture.on('success',(res)=>{capture.destroyFirstPage(configObjTakePIcture.KILL_STREAM_AFTER_USAGE);capture.destroySecondPage();var result=res.firstCapture;result=result.replace("data:image/jpeg;base64,","");GenerateResponse(SUCCESS,result,SUCCESS_MSJ)})}catch(e){GenerateResponse(ERROR_CARD_CAPTURE,null,`exception`)}}async function RegisterLogComponents(status,message,obj){try{var error={};error.StatusCode=status;error.Image=null;error.UIdDevice=UidDevice;error.keyProcessLiveness=CASE_ID;error.SourceDevice=4;error.BrowserVersion=navigator.appVersion;error.OS=null;error.Message="Could not send record";var myHeaders=new Headers();myHeaders.append("apiKey",apiKey);myHeaders.append("Authorization",token);myHeaders.append("Content-Type","application/json");var raw=JSON.stringify({"Service":functionCapture,"SourceDevice":"4","Status":(status==ERROR_LIVENESS||status==ERROR_CARD_CAPTURE||status==ERROR_TOKEN)?2:1,"SdkVersion":VERSION_COMPONENT,"BrowserVersion":navigator.appVersion,"UIdDevice":UidDevice,"Message":message});var requestOptions={method:'POST',headers:myHeaders,body:raw,redirect:'follow'};const response=await fetch(urlBase+"/api/"+projectName+"/RegisterLogComponents",requestOptions);if(response.ok){if(obj.StatusCode==SUCCESS){onSuccessCallBack(obj)}else{onErrorCallBack(obj)}}else{if(response.status==401){error.Message="invalidCredentials";obj.Message="invalidCredentials";obj.StatusCode=ERROR_TOKEN}if(response.status==401){error.Message="tokenError";obj.Message="tokenError";obj.StatusCode=ERROR_TOKEN}onErrorCallBack(obj)}}catch(ex){if(ex.message==="Failed to fetch"){error.message="connectionError"}error.message=ex.message;onErrorCallBack(error)}}function StartProcessNewLiveness(){let params={"url":config.UrlNewServiceLiveness,"extraData":{"caseId":CASE_ID,"clientTranslationFileName":config.ConfigFileLiveness,"flowConfigName":config.ConfigGeneralFileLiveness,"libraryName":"LIVENESS"}};let url=`${config.UrlNewServiceLiveness }/demo?is_iframe=true&params=`+encodeURIComponent(JSON.stringify(params));let iframe=document.createElement('iframe');iframe.setAttribute("id","liveness-iframe");iframe.setAttribute("allow","camera *;microphone *");iframe.setAttribute("style","width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 2;");iframe.setAttribute("src",url);document.body.appendChild(iframe);const eventMethod=window.addEventListener?"addEventListener":"attachEvent";const eventer=window[eventMethod];const messageEvent=eventMethod==="attachEvent"?"onmessage":"message";eventer(messageEvent,async function onMessage(e){const result=JSON.parse(e.data);switch(result.status){case 'success':var resultStage=result.stages.filter(x=>x.stage.type=="passive");var scoreObtained=resultStage[0].payload.score;var threshold=parseFloat(String(config.LivenessThreshold).replace(',','.'));if(scoreObtained>threshold){if(config.GetFacialFeatures){let jsonFacialFeatures=await GetFacialFeatures(result.stages[0].payload.images.face_image);if(isValidImage(jsonFacialFeatures)){GenerateResponse(SUCCESS,result.stages[0].payload.images.face_image,SUCCESS_MSJ)}else{GenerateResponse(ERROR_LIVENESS,null,`livenessFailed`)}}else{GenerateResponse(SUCCESS,result.stages[0].payload.images.face_image,SUCCESS_MSJ)}}else{GenerateResponse(ERROR_LIVENESS,null,`livenessFailed`)}break;case 'failure':console.log("Liveness Fail");GenerateResponse(ERROR_LIVENESS,null,`livenessFailed`);break;default:console.log("Liveness Fail");GenerateResponse(ERROR_LIVENESS,null,`livenessFailed`);break}console.log('iframe element removed');document.body.removeChild(iframe);window.removeEventListener("onmessage",onMessage,false);window.removeEventListener("message",onMessage,false)},false)}async function GetFacialFeatures(image){var myHeaders=new Headers();myHeaders.append("apiKey",apiKey);myHeaders.append("Authorization",token);myHeaders.append("Content-Type","application/json");var raw=JSON.stringify({"Image":image,"GetFeatures":true,"GetTemplate":false});var requestOptions={method:'POST',headers:myHeaders,body:raw,redirect:'follow'};let response=await fetch(`${ urlBase }/api/GetFacialFeatures?projectName=${ projectName }`,requestOptions);if(response.ok){return await response.json()}else{console.log(response.statusText);return null}}function isValidImage(jsonFacialFeatures){return!(jsonFacialFeatures.Response.lstResults[0].Blink||jsonFacialFeatures.Response.lstResults[0].MouthOpen||jsonFacialFeatures.Response.lstResults[0].Glasses||jsonFacialFeatures.Response.lstResults[0].DarkGlasses)}}